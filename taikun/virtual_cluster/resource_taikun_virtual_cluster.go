package virtual_cluster

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	tk "github.com/itera-io/taikungoclient"
	tkcore "github.com/itera-io/taikungoclient/client"
	"github.com/itera-io/terraform-provider-taikun/taikun/utils"
	"time"
)

func resourceTaikunVirtualClusterSchema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"id": {
			Description: "The ID of the Virtual cluster project.",
			Type:        schema.TypeString,
			Computed:    true,
		},
		"name": {
			Description:  "The name of the virtual cluster.",
			Type:         schema.TypeString,
			ValidateFunc: validation.StringLenBetween(3, 30),
			Required:     true,
			ForceNew:     true,
		},
		"parent_id": {
			Description:  "The ID of the parent of the virtual cluster.",
			Type:         schema.TypeString,
			ValidateFunc: validation.StringLenBetween(3, 30),
			Required:     true,
			ForceNew:     true,
		},
		"hostname": {
			Description: "The hostname that will be used for the virtual cluster. If left empty, you are assigned a hostname based on your IP an virtual cluster name.",
			Type:        schema.TypeString,
			Optional:    true,
			ForceNew:    true,
			Default:     "",
		},
		"alerting_profile_id": {
			Description:      "The id of the alerting profile that will be used for the virtual cluster.",
			Type:             schema.TypeString,
			Optional:         true,
			Computed:         false,
			DiffSuppressFunc: utils.IgnoreChangeFromEmpty,
			ValidateDiagFunc: utils.StringIsInt,
		},
		"delete_on_expiration": {
			Description:  "If enabled, the virtual project will be deleted on the expiration date and it will not be possible to recover it.",
			Type:         schema.TypeBool,
			Optional:     true,
			Default:      false,
			RequiredWith: []string{"expiration_date"},
		},
		"expiration_date": {
			Description:      "Virtual project's expiration date in the format: 'dd/mm/yyyy'.",
			Type:             schema.TypeString,
			Optional:         true,
			ValidateDiagFunc: utils.StringIsDate,
		},
		"hostname_generated": {
			Description: "IP-based resolvable hostname generated by Taikun.",
			Type:        schema.TypeString,
			Computed:    true,
		},
		"status": {
			Description: "Do not set. Used for tracking remote virtual cluster failures.",
			Type:        schema.TypeString,
			Optional:    true,
			ForceNew:    true,
			Default:     "",
		},
	}
}

func ResourceTaikunVirtualCluster() *schema.Resource {
	return &schema.Resource{
		Description:   "Virtual Cluster project in Taikun.",
		CreateContext: resourceTaikunVirtualClusterCreate,
		ReadContext:   generateResourceTaikunVirtualClusterRead(),
		UpdateContext: resourceTaikunVirtualClusterUpdate,
		DeleteContext: resourceTaikunVirtualClusterDelete,
		Schema:        resourceTaikunVirtualClusterSchema(),
	}
}

func resourceTaikunVirtualClusterUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	apiClient := meta.(*tk.Client)
	virtualClusterId, err := utils.Atoi32(d.Get("id").(string))
	if err != nil {
		return diag.FromErr(err)
	}

	if d.HasChange("expiration_date") || d.HasChange("delete_on_expiration") {
		body := tkcore.ProjectExtendLifeTimeCommand{}
		body.SetProjectId(virtualClusterId)

		if expirationDate, expirationDateIsSet := d.GetOk("expiration_date"); expirationDateIsSet {
			dateTime := utils.DateToDateTime(expirationDate.(string))
			body.SetExpireAt(time.Time(dateTime))
		} else {
			body.SetExpireAtNil()
		}

		if deleteOnExpiration, deleteOnExpirationIsSet := d.GetOk("delete_on_expiration"); deleteOnExpirationIsSet {
			body.SetDeleteOnExpiration(deleteOnExpiration.(bool))
		} else {
			body.SetDeleteOnExpiration(false)
		}

		_, _, err = apiClient.Client.ProjectsAPI.ProjectsExtendLifetime(context.TODO()).ProjectExtendLifeTimeCommand(body).Execute()
		if err != nil {
			return diag.FromErr(err)
		}
	}

	return utils.ReadAfterUpdateWithRetries(generateResourceTaikunVirtualClusterRead(), ctx, d, meta)
}

func resourceTaikunVirtualClusterDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	apiClient := meta.(*tk.Client)
	deleteCommand := tkcore.DeleteVirtualClusterCommand{}
	virtualClusterId, err := utils.Atoi32(d.Get("id").(string))
	if err != nil {
		return diag.FromErr(err)
	}
	deleteCommand.SetProjectId(virtualClusterId)
	_, response, err2 := apiClient.Client.VirtualClusterAPI.VirtualClusterDelete(ctx).DeleteVirtualClusterCommand(deleteCommand).Execute()
	if err2 != nil {
		return diag.FromErr(tk.CreateError(response, err2))
	}
	d.SetId("")
	return nil
}

func resourceTaikunVirtualClusterCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	apiClient := meta.(*tk.Client)

	// Send create query
	bodyCreate := &tkcore.CreateVirtualClusterCommand{}
	name := d.Get("name").(string)
	parentId, err := utils.Atoi32(d.Get("parent_id").(string))
	if err != nil {
		return diag.FromErr(err)
	}
	bodyCreate.SetName(name)
	bodyCreate.SetProjectId(parentId)
	bodyCreate.SetDeleteOnExpiration(false)
	bodyCreate.SetExposeHostname(d.Get("hostname").(string))

	if deleteOnExpiration, deleteOnExpirationIsSet := d.GetOk("delete_on_expiration"); deleteOnExpirationIsSet {
		bodyCreate.SetDeleteOnExpiration(deleteOnExpiration.(bool))
	}
	if expirationDate, expirationDateIsSet := d.GetOk("expiration_date"); expirationDateIsSet {
		dateTime := utils.DateToDateTime(expirationDate.(string))
		bodyCreate.SetExpiredAt(time.Time(dateTime))
	} else {
		bodyCreate.SetExpiredAtNil()
	}

	alertingProfileId := d.Get("alerting_profile_id").(string)
	if alertingProfileId != "" {
		alertingProfileIdInt32, err := utils.Atoi32(alertingProfileId)
		if err != nil {
			return diag.FromErr(err)
		}
		bodyCreate.SetAlertingProfileId(alertingProfileIdInt32)
	}

	_, response, err := apiClient.Client.VirtualClusterAPI.VirtualClusterCreate(ctx).CreateVirtualClusterCommand(*bodyCreate).Execute()
	if err != nil {
		return diag.FromErr(tk.CreateError(response, err))
	}

	// Get ID of newly created project
	err = loadVirtualClusterId(d, meta)
	if err != nil {
		return diag.FromErr(err)
	}
	virtualClusterId, err := utils.Atoi32(d.Get("id").(string))
	if err != nil {
		return diag.FromErr(err)
	}

	// Monitor project state with ID
	err = resourceTaikunVirtualClusterWaitForReady(virtualClusterId, ctx, meta)
	if err != nil {
		return diag.FromErr(err)
	}

	// Once project is ready, read all information about it.
	return utils.ReadAfterCreateWithRetries(generateResourceTaikunVirtualClusterRead(), ctx, d, meta)
}

// From [Parent Project ID] and [Virtual Cluster Name] find the ID of the Virtual project and load it into schema (d)
func loadVirtualClusterId(d *schema.ResourceData, meta interface{}) error {
	apiClient := meta.(*tk.Client)
	var offset int32 = 0
	virtualClusterName := d.Get("name").(string)
	parentId, err := utils.Atoi32(d.Get("parent_id").(string))
	if err != nil {
		return err
	}

	params := apiClient.Client.VirtualClusterAPI.VirtualClusterList(context.TODO(), parentId).Search(virtualClusterName)

	var virtualClustersList []tkcore.VClusterListDto
	for {
		response, res, err := params.Offset(offset).Execute()
		if err != nil {
			return tk.CreateError(res, err)
		}
		virtualClustersList = append(virtualClustersList, response.GetData()...)
		if len(virtualClustersList) == int(response.GetTotalCount()) {
			break
		}
		offset = int32(len(virtualClustersList))
	}
	foundMatch := false
	for _, virtualProject := range virtualClustersList {
		if virtualProject.GetName() == virtualClusterName {
			foundMatch = true
			d.SetId(utils.I32toa(virtualProject.GetId()))
			err = d.Set("id", utils.I32toa(virtualProject.GetId()))
			if err != nil {
				return err
			}
			break
		}
	}
	if !foundMatch {
		return fmt.Errorf("Could not find virtual cluster by its ID in Taikun.")
	}

	return nil
}

// For this to work, [Parent Project ID] and [Virtual Project ID] muset be set in schema (d).
func generateResourceTaikunVirtualClusterRead() schema.ReadContextFunc {
	return func(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
		apiClient := meta.(*tk.Client)

		parentId, err := utils.Atoi32(d.Get("parent_id").(string))
		if err != nil {
			return diag.FromErr(err)
		}
		virtualClusterId, err := utils.Atoi32(d.Get("id").(string))
		if err != nil {
			return diag.FromErr(err)
		}

		data, response, err := apiClient.Client.VirtualClusterAPI.VirtualClusterList(ctx, parentId).Id(virtualClusterId).Execute()
		if err != nil {
			return diag.FromErr(tk.CreateError(response, err))
		}

		foundMatch := false
		var rawVirtualProject tkcore.VClusterListDto
		if data.GetTotalCount() == 1 {
			foundMatch = true
			rawVirtualProject = data.GetData()[0]
		}

		// The Created virtual project was not found on the server. This probably means it got deleted from Taikun.
		// Do not delete, just create it again.
		if !foundMatch {
			d.SetId("")
			return nil
		}
		// Project was found in Failed state.
		// Delete project and create it again.
		if foundMatch && rawVirtualProject.GetStatus() == tkcore.PROJECTSTATUS_FAILURE {
			err = d.Set("status", "Failed")
			if err != nil {
				return diag.FromErr(err)
			}
			return nil
		}

		// Load all the found data to the local object
		err = utils.SetResourceDataFromMap(d, flattenTaikunVirtualCluster(&rawVirtualProject))
		if err != nil {
			return diag.FromErr(err)
		}

		d.SetId(d.Get("id").(string)) // We need to tell provider that object was created

		return nil
	}
}

func flattenTaikunVirtualCluster(rawVirtualProject *tkcore.VClusterListDto) map[string]interface{} {

	virtualProjectMap := make(map[string]interface{})

	// Flatten alerting profiles
	var nullID int32
	if rawVirtualProject.GetAlertingProfileId() != nullID {
		virtualProjectMap["alerting_profile_id"] = utils.I32toa(rawVirtualProject.GetAlertingProfileId())
	}

	virtualProjectMap["id"] = utils.I32toa(rawVirtualProject.GetId())
	virtualProjectMap["name"] = rawVirtualProject.GetName()
	virtualProjectMap["hostname_generated"] = rawVirtualProject.GetAccessIp()
	virtualProjectMap["delete_on_expiration"] = rawVirtualProject.GetDeleteOnExpiration()
	virtualProjectMap["expiration_date"] = utils.Rfc3339DateTimeToDate(rawVirtualProject.GetExpiredAt())

	return virtualProjectMap
}

// After we create a virtual cluster, we wait. It takes some time (~60s).
func resourceTaikunVirtualClusterWaitForReady(virtualClusterId int32, ctx context.Context, meta interface{}) error {
	apiClient := meta.(*tk.Client)

	pendingStates := []string{"pending"}
	targetStates := []string{"finished"}

	// Get virtual project and look at its state.
	createStateConf := &retry.StateChangeConf{
		Pending: pendingStates,
		Target:  targetStates,
		Refresh: func() (interface{}, string, error) {
			data, response, err := apiClient.Client.ProjectsAPI.ProjectsList(context.TODO()).Id(virtualClusterId).Execute()
			if err != nil {
				return nil, "", tk.CreateError(response, err)
			}
			if data.GetTotalCount() != 1 {
				return nil, "", fmt.Errorf("Could not find virtual cluster by id.")
			}

			foundMatch := "pending"
			if data.GetData()[0].GetStatus() == tkcore.PROJECTSTATUS_READY {
				foundMatch = "finished"
			}
			return data, foundMatch, err
		},
		Timeout:    45 * time.Minute,
		Delay:      10 * time.Second,
		MinTimeout: 10 * time.Second,
	}

	_, err := createStateConf.WaitForStateContext(ctx)
	if err != nil {
		return fmt.Errorf("error waiting for virtual cluster (%d) to be read: %s", virtualClusterId, err)
	}

	return nil
}
