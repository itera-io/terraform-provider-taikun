on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      endpoint:
        required: true
        type: string

env:
  GO_VERSION: "1.21"
  TF_ACC: "1"
  TF_ACC_TERRAFORM_VERSION: "1.1.0"

  # Endpoint and login, set by parent workflow. Beware staging.
  TAIKUN_API_HOST: ${{ (inputs.endpoint == 'staging') && secrets.TAIKUN_STAGING_API_HOST || secrets.TAIKUN_API_HOST }}
  TAIKUN_EMAIL: ${{ (inputs.endpoint == 'staging') && secrets.TAIKUN_STAGING_EMAIL || secrets.TAIKUN_EMAIL }}
  TAIKUN_PASSWORD: ${{ (inputs.endpoint == 'staging') && secrets.TAIKUN_STAGING_PASSWORD || secrets.TAIKUN_PASSWORD }}

  PROMETHEUS_PASSWORD: ${{ secrets.PROMETHEUS_PASSWORD }}
  PROMETHEUS_URL: ${{ secrets.PROMETHEUS_URL }}
  PROMETHEUS_USERNAME: ${{ secrets.PROMETHEUS_USERNAME }}

  OS_USERNAME: ${{ secrets.OS_USERNAME }}
  OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
  OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
  OS_INTERFACE: ${{ secrets.OS_INTERFACE }}
  OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
  OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
  OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
  OS_CONTINENT: ${{ secrets.OS_CONTINENT }}

  GCP_CONFIG_FILE: ${{ secrets.GCP_CONFIG_FILE }}
  GCP_FOLDER_ID: ${{ secrets.GCP_FOLDER_ID }}
  GCP_BILLING_ACCOUNT: ${{ secrets.GCP_BILLING_ACCOUNT }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  GCP_ZONE: ${{ secrets.GCP_ZONE }}
  GCP_AZ_COUNT: 1

  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_AZ_COUNT: 1

  AZURE_SUBSCRIPTION: ${{ secrets.AZURE_SUBSCRIPTION }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT: ${{ secrets.AZURE_TENANT }}
  AZURE_SECRET: ${{ secrets.AZURE_SECRET }}
  ARM_AVAILABILITY_ZONE: 1
  AZURE_AZ_COUNT: 1
  AZURE_LOCATION: northeurope

  S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
  S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
  S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
  S3_REGION: ${{ secrets.S3_REGION }}

  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  SLACK_WEBHOOK_FEEDBACK: ${{ secrets.SLACK_WEBHOOK_FEEDBACK }}

  PROXMOX_API_HOST: ${{ secrets.PROXMOX_API_HOST }}
  PROXMOX_CLIENT_ID: ${{ secrets.PROXMOX_CLIENT_ID }}
  PROXMOX_CLIENT_SECRET: ${{ secrets.PROXMOX_CLIENT_SECRET }}
  PROXMOX_STORAGE: ${{ secrets.PROXMOX_STORAGE }}
  PROXMOX_VM_TEMPLATE_NAME: ${{ secrets.PROXMOX_VM_TEMPLATE_NAME }}
  PROXMOX_HYPERVISOR: ${{ secrets.PROXMOX_HYPERVISOR }}
  PROXMOX_HYPERVISOR2: ${{ secrets.PROXMOX_HYPERVISOR2 }}
  
  PROXMOX_PRIVATE_NETWORK: ${{ secrets.PROXMOX_PRIVATE_NETWORK }}
  PROXMOX_PRIVATE_NETMASK: ${{ secrets.PROXMOX_PRIVATE_NETMASK }}
  PROXMOX_PRIVATE_GATEWAY: ${{ secrets.PROXMOX_PRIVATE_GATEWAY }}
  PROXMOX_PRIVATE_BEGIN_RANGE: ${{ secrets.PROXMOX_PRIVATE_BEGIN_RANGE }}
  PROXMOX_PRIVATE_END_RANGE: ${{ secrets.PROXMOX_PRIVATE_END_RANGE }}
  PROXMOX_PRIVATE_BRIDGE: ${{ secrets.PROXMOX_PRIVATE_BRIDGE }}

  PROXMOX_PUBLIC_NETWORK: ${{ secrets.PROXMOX_PUBLIC_NETWORK }}
  PROXMOX_PUBLIC_NETMASK: ${{ secrets.PROXMOX_PUBLIC_NETMASK }}
  PROXMOX_PUBLIC_GATEWAY: ${{ secrets.PROXMOX_PUBLIC_GATEWAY }}
  PROXMOX_PUBLIC_BEGIN_RANGE: ${{ secrets.PROXMOX_PUBLIC_BEGIN_RANGE }}
  PROXMOX_PUBLIC_END_RANGE: ${{ secrets.PROXMOX_PUBLIC_END_RANGE }}
  PROXMOX_PUBLIC_BRIDGE: ${{ secrets.PROXMOX_PUBLIC_BRIDGE }}

  VSPHERE_USERNAME: ${{ secrets.VSPHERE_USERNAME }}
  VSPHERE_PASSWORD: ${{ secrets.VSPHERE_PASSWORD }}
  VSPHERE_API_URL:  ${{ secrets.VSPHERE_API_URL }}
  VSPHERE_DATACENTER: ${{ secrets.VSPHERE_DATACENTER }}
  VSPHERE_RESOURCE_POOL: ${{ secrets.VSPHERE_RESOURCE_POOL }}
  VSPHERE_DATA_STORE: ${{ secrets.VSPHERE_DATA_STORE }}
  VSPHERE_DRS_ENABLED: ${{ secrets.VSPHERE_DRS_ENABLED }}
  VSPHERE_HYPERVISOR: ${{ secrets.VSPHERE_HYPERVISOR }}
  VSPHERE_HYPERVISOR2: ${{ secrets.VSPHERE_HYPERVISOR2 }}
  VSPHERE_VM_TEMPLATE: ${{ secrets.VSPHERE_VM_TEMPLATE }}
  VSPHERE_CONTINENT: ${{ secrets.VSPHERE_CONTINENT }}

  VSPHERE_PUBLIC_NETWORK_NAME: ${{ secrets.VSPHERE_PUBLIC_NETWORK_NAME }}
  VSPHERE_PUBLIC_NETWORK_ADDRESS: ${{ secrets.VSPHERE_PUBLIC_NETWORK_ADDRESS }}
  VSPHERE_PUBLIC_NETMASK: ${{ secrets.VSPHERE_PUBLIC_NETMASK }}
  VSPHERE_PUBLIC_GATEWAY: ${{ secrets.VSPHERE_PUBLIC_GATEWAY }}
  VSPHERE_PUBLIC_BEGIN_RANGE: ${{ secrets.VSPHERE_PUBLIC_BEGIN_RANGE }}
  VSPHERE_PUBLIC_END_RANGE: ${{ secrets.VSPHERE_PUBLIC_END_RANGE }}

  VSPHERE_PRIVATE_NETWORK_NAME: ${{ secrets.VSPHERE_PRIVATE_NETWORK_NAME }}
  VSPHERE_PRIVATE_NETWORK_ADDRESS: ${{ secrets.VSPHERE_PRIVATE_NETWORK_ADDRESS }}
  VSPHERE_PRIVATE_NETMASK: ${{ secrets.VSPHERE_PRIVATE_NETMASK }}
  VSPHERE_PRIVATE_GATEWAY: ${{ secrets.VSPHERE_PRIVATE_GATEWAY }}
  VSPHERE_PRIVATE_BEGIN_RANGE: ${{ secrets.VSPHERE_PRIVATE_BEGIN_RANGE }}
  VSPHERE_PRIVATE_END_RANGE: ${{ secrets.VSPHERE_PRIVATE_END_RANGE }}

  # Trying to avoid race conditions
  TERRAFORM_SKIP_VERIFY: true

jobs:
  # TF provider must build without failure
  build:
    name: Build
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: Build
        run: |
          go build -v .

  # Linting must not find any problems
  golangci:
    name: Lint
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Lint (golangci-lint)
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=10m

  test1a:
    name: 1a) Dry test Taikun
    needs: [build,golangci]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccDataSourceTaikunCloudCredentialsProxmoxWithFilter$$|TestAccDataSourceTaikunCloudCredentialsProxmox$$|TestAccResourceTaikunCloudCredentialProxmox$$|TestAccResourceTaikunCloudCredentialProxmoxLock$$|TestAccResourceTaikunCloudCredentialProxmoxUpdate$$|TestAccResourceTaikunAutoscalerOpenstackProject$$|TestAccResourceTaikunProjectWasm$$|TestAccDataSourceTaikunProject|TestAccDataSourceTaikunImagesDeprecated|TestAccDataSourceTaikunImagesOpenStack|TestAccDataSourceTaikunFlavorsOpenStack|TestAccDataSourceTaikunImagesAzure|TestAccDataSourceTaikunFlavorsAzure|TestAccDataSourceTaikunFlavorsAWS|TestAccDataSourceTaikunImagesAWS|TestAccResourceTaikunProjectE|TestAccDataSourceTaikunPolicyProfile|TestAccDataSourceTaikunSlackConfiguration|TestAccResourceTaikunStandaloneProfile|TestAccDataSourceTaikunStandaloneProfile|TestAccDataSourceTaikunUser|TestAccResourceTaikunProjectToggle|TestAccResourceTaikunSlack|TestAccResourceTaikunAlerting|TestAccResourceTaikunPolicyProfile|TestAccResourceTaikunCloudCredentials|TestAccResourceTaikunCloudCredentialOpenStack|TestAccResourceTaikunCloudCredentialAzure|TestAccResourceTaikunCloudCredentialAWS|TestAccResourceTaikunBackupCredential|TestProvider$$)' ./scripts/rerun_failed_tests.sh

  test1b:
    name: 1b) Dry test Taikun
    needs: [build,golangci]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccResourceTaikunOrganization|TestAccDataSourceTaikunOrganization|TestAccDataSourceTaikunShowback|TestAccDataSourceTaikunAccessProfile|TestAccResourceTaikunAccessProfile|TestAccDataSourceTaikunAlertingProfile|TestAccResourceTaikunProjectModifyAlertingProfile|TestAccResourceTaikunKubernetesProfile|TestAccResourceTaikunBilling|TestAccResourceTaikunProjectModifyImages|TestAccResourceTaikunProjectD|TestAccResourceTaikunProjectK|TestAccResourceTaikunUser|TestAccResourceTaikunShowback|TestAccResourceTaikunProjectModifyFlavors|TestAccResourceTaikunProjectU|TestAccResourceTaikunProject$$|TestAccDataSourceTaikunCloudCredentialOpenStack|TestAccDataSourceTaikunCloudCredentialsOpenStack|TestAccDataSourceTaikunCloudCredentialAzure|TestAccDataSourceTaikunCloudCredentialsAzure|TestAccDataSourceTaikunCloudCredentialAWS|TestAccDataSourceTaikunCloudCredentialsAWS|TestAccDataSourceTaikunKubernetesProfile|TestAccDataSourceTaikunBillingRule|TestAccDataSourceTaikunBillingCredential|TestAccDataSourceTaikunBackupCredential)' ./scripts/rerun_failed_tests.sh

  test1c:
    name: 1c) Dry Test GCP
    needs: [build,golangci]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: Create GCP config file
        env:
          GCP_CONFIG_FILE: ${{ secrets.GCP_CONFIG_FILE }}
        run: |
          echo "$GCP_CONFIG_FILE" > ./taikun/gcp.json
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccResourceTaikunCloudCredentialGCP$$|TestAccDataSourceTaikunCloudCredentialsGCP$$|TestAccDataSourceTaikunImagesGCP$$|TestAccDataSourceTaikunCloudCredentialGCP$$)' ./scripts/rerun_failed_tests.sh

  test1d:
    name: 1d) Dry Test vSphere
    needs: [build,golangci]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccDataSourceTaikunImagesVsphere$$|TestAccDataSourceTaikunFlavorsVsphere$$|TestAccResourceTaikunCloudCredentialVsphereUpdate$$|TestAccResourceTaikunCloudCredentialVsphereLock$$|TestAccResourceTaikunCloudCredentialVsphere$$|TestAccDataSourceTaikunCloudCredentialVsphere$$|TestAccDataSourceTaikunCloudCredentialsVsphere$$|TestAccDataSourceTaikunCloudCredentialsVsphereWithFilter$$)' ./scripts/rerun_failed_tests.sh

  test2a:
    name: 2a) Openstack VM minimal
    needs: [test1a, test1b, test1c, test1d]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccResourceTaikunProjectStandaloneOpenStackMinimal$$)'
          go test . ./taikun/provider_tests -v -run ${ACCEPTANCE_TESTS} -timeout 30m

  test2b:
    name: 2b) Openstack VM, update IP
    needs: [test1a, test1b, test1c, test1d]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccResourceTaikunProjectStandaloneOpenStackMinimalUpdateIP$$)'
          go test . ./taikun/provider_tests -v -run ${ACCEPTANCE_TESTS} -timeout 30m

  test2c:
    name: 2c) Openstack VM, update flavor
    needs: [test1a, test1b, test1c, test1d]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccResourceTaikunProjectStandaloneOpenStackMinimalUpdateFlavor$$)'
          go test . ./taikun/provider_tests -v -run ${ACCEPTANCE_TESTS} -timeout 30m

  test2d:
    name: 2d) Openstack VM, volume type
    needs: [test1a, test1b, test1c, test1d]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccResourceTaikunProjectStandaloneOpenStackMinimalWithVolumeType$$)'
          go test . ./taikun/provider_tests -v -run ${ACCEPTANCE_TESTS} -timeout 30m

  test3a:
    name: 3a) AWS VM, minimal
    needs: [test1a, test1b, test1c, test1d]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccResourceTaikunProjectStandaloneAWSMinimal$$)'
          go test . ./taikun/provider_tests -v -run ${ACCEPTANCE_TESTS} -timeout 30m

  test3b:
    name: 3b) AWS VM, update flavor
    needs: [test1a, test1b, test1c, test1d]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccResourceTaikunProjectStandaloneAWSMinimalUpdateFlavor$$)'
          go test . ./taikun/provider_tests -v -run ${ACCEPTANCE_TESTS} -timeout 30m

  test4a:
    name: 4a) Azure VM, minimal
    needs: [test1a, test1b, test1c, test1d]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccResourceTaikunProjectStandaloneAzureMinimal$$)'
          go test . ./taikun/provider_tests -v -run ${ACCEPTANCE_TESTS} -timeout 30m

  test4b:
    name: 4b) Azure VM, update flavor
    needs: [test1a, test1b, test1c, test1d]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccResourceTaikunProjectStandaloneAzureMinimalUpdateFlavor$$)'
          go test . ./taikun/provider_tests -v -run ${ACCEPTANCE_TESTS} -timeout 30m

  test4c:
    name: 4c) Azure VM, volume type
    needs: [test1a, test1b, test1c, test1d]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccResourceTaikunProjectStandaloneAzureMinimalWithVolumeType$$)'
          go test . ./taikun/provider_tests -v -run ${ACCEPTANCE_TESTS} -timeout 30m

  test6a:
    name: 6a) Proxmox VM, minimal
    needs: [test1a, test1b, test1c, test1d]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccResourceTaikunProjectStandaloneProxmoxMinimal$$)'
          go test . ./taikun/provider_tests -v -run ${ACCEPTANCE_TESTS} -timeout 30m

  test5a:
    name: 5a) Openstack, k8s
    needs: [test2a, test2b, test2c, test2d]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}
      - name: Get dependencies
        run: |
          go mod download
      - name: TF acceptance tests
        run: |
          date
          ACCEPTANCE_TESTS='(TestAccResourceTaikunProjectMinimal$$)'
          go test . ./taikun/provider_tests -v -run ${ACCEPTANCE_TESTS} -timeout 30m

  slackWebhook:
    name: End) Send feedback to slack
    if: ${{ failure() }}
    needs: [test5a, test3a, test3b, test4a, test4b, test4c, test6a]
    runs-on: self-hosted
    timeout-minutes: 10
    steps:
      - name: The job has failed
        run: |
          curl -i -X POST -H "Content-Type: application/json" -d '{"username":"TF-TEST", "text":"TF tests FAILED\n'"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"'"}' $SLACK_WEBHOOK_FEEDBACK; exit 0
